// theme colours http://getbem.com/naming/
// sass variables won't work inside component files
// can use global css variables or
// use custom class names for styling like tailwind.
// @nuxtjs/style-resources allows you to use global variables
// global css vars available at component level
// it's possible to add global sass variables via webpack config
// using additionalData property


// theme colours
// map the variables with key:value pairs for mixins
// https://sass-lang.com/documentation/values/maps
// controlling colour https://thoughtbot.com/blog/controlling-color-with-sass-color-functions
$colours: (
  primary: #1a1a1d,
  primary-100: rgba(26,26,29, 0.07),
  secondary: #e85b46,
  disabled: #b0bec5,
  destruct:rgba(165, 10, 69, 0.9),
  error:rgba(165, 10, 69, 0.9),
  error-100: rgba(165, 10, 69, 0.2),
  success:  #32543b,
  light: rgb(255, 255, 255),
  dark: rgb(48, 48, 48),
  white: #fff,
  blue: #1a1a1d,
);

$links: map-get($colours, secondary);

:root {
  --links: #{$links};
  --font-family: "Roboto", system, sans-serif;
}

// create spacing units for mixin
// margin and paddings will be created with mixin
$spacing: (
  1: 0.5rem,
  2: 1rem,
  3: 1.5rem,
  4: 2rem,
);

// breakpoints
$breakpoint-xs: 320px;
$breakpoint-sm: 600px;
$breakpoint-md: 768px;
$breakpoint-lg: 960px;
$breakpoint-xl: 1200px;

// breakpoints
$breakpoints: (
  xs: 320px,
  sm: 600px,
  md: 768px,
  lg: 960px,
  xl: 1200px
);
